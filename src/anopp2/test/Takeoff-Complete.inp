 $ Takeoff-Complete.inp
 $
 $ Begin input declarations
 $
  ANOPP JECHO=.FALSE. JLOG=.FALSE. NAEUD=2000 NAETD=2000 $
  STARTCS                   $
 $
 $    Load procedure libraries from the ANOPP permanent database if needed:
 $
  LOAD /LIBRARY/ PROCLIB         $ Required when procedure libraries are used
 $
 $    Define common parameters.
 $
  PARAM IUNITS        =  7HENGLISH $  Use English units
  PARAM IPRINT        =          3 $  Detailed output option code
  PARAM NENG          =          2 $  Number of engines
  PARAM RS            =       1.00 $  Distance from source to pseudo-observer,ft
 $
 $    Define pseudo observer one-third octave band center frequencies, polar 
 $    directivity angles and azimuthal directivity angles.
 $
  UPDATE NEWU=SFIELD SOURCE=*  $
     -ADDR OLDM=* NEWM=FREQ FORMAT=4H*RS$ $
            50.     63.     80.    100.    125.    160.
           200.    250.    315.    400.    500.    630.
           800.   1000.   1250.   1600.   2000.   2500.
          3150.   4000.   5000.   6300.   8000.  10000.  $
     -ADDR OLDM=* NEWM=THETA FORMAT=4H*RS$ $
            10.   20.   30.   40.   50.    60.    70.    80.    90.
           100.  110.  120.  130.  140.   150.   160.   170.    $
     -ADDR OLDM=* NEWM=PHI FORMAT=4H*RS$ $
           -90. -80. -70. -60. -50. -40. -30. -20. -10.
             0.  10.  20.  30.  40.  50.  60.  70.  80.   90. $
  END* $
 $
 $    Define input user parameters for Atmospheric Module (ATM)
 $
  CREATE ATM $
  UPDATE NEWU=ATM SOURCE=* LIST=ES $
  -ADDR NEWM=IN OLDM=* FORMAT=4H3RS$ $
         0.00     518.67      70.00 $
       984.25     515.16      70.00 $
      1968.50     511.65      70.00 $
      2952.76     508.14      70.00 $
      3937.01     504.63      70.00 $
      4921.26     501.12      70.00 $
      5905.51     497.61      70.00 $
      6889.76     494.12      70.00 $
      7874.02     490.61      70.00 $
      8858.27     487.10      70.00 $
      9842.52     483.59      70.00 $
     10826.77     480.08      70.00 $
     11811.02     476.57      70.00 $
     12795.28     473.08      70.00 $
     13779.53     469.57      70.00 $
     14763.78     466.06      70.00 $
     15748.03     462.55      70.00 $
     16732.28     459.05      70.00 $
     17716.54     455.54      70.00 $
     18700.79     452.03      70.00 $
     19685.04     448.54      70.00 $
     20669.29     445.03      70.00 $
     21653.54     441.52      70.00 $
     22637.79     438.03      70.00 $
     23622.05     434.52      70.00 $
     24606.30     431.03      70.00 $
     25590.55     427.52      70.00 $
     26574.80     424.03      70.00 $
     27559.05     420.52      70.00 $
     28543.31     417.02      70.00 $
     29527.56     413.51      70.00 $
     30511.81     410.02      70.00 $
     31496.06     406.51      70.00 $
     32480.31     403.02      70.00 $
  END* $
 $
  PARAM DELH      =     984.25    $ Altitude increment for output, ft
  PARAM NHO       =         34    $ Number of output altitudes
  PARAM H1        =        0.0    $ Ground level altitude above sea level, ft
  PARAM P1        =    2116.22    $ Atmospheric pressure at ground level, lbf/ft**2
  PARAM TA        =      536.7    $  Atmospheric temperature at ground level, R
  PARAM IPRINT = 0                $ Turn off print 
 $
 $   Execute the Atmospheric Module (ATM)
 $
  EXECUTE ATM $
 $
 $    Define input user parameters for the Atmospheric Absorption Module (ABS)
 $
  PARAM ABSINT     =       5             $  Number of integration steps
  PARAM ISAE       =       1             $  Method option: = 1 - use SAE ARP 866 method
 $
 $   Execute the Atmospheric Absorption Module (ABS)
 $
  EXECUTE ABS  $
 $
 $    Define input user parameters for the Source Flyover Module (SFO)
 $ 
  PARAM J         =          1    $  Initial step number 
  PARAM DELMACH   =       0.05    $  Mach number limit 
  PARAM ZGR       =        0.0    $  Runway altitude above sea level, ft 
  PARAM ENGNAM    =      3HXXX    $  Engine identifier name 
  PARAM TI        =        0.0    $  Initial time, s 
  PARAM YI        =        0.0    $  Initial lateral distance, ft 
  PARAM THW       =        0.0    $  Inclination of flight vector wrt horizontal,
                                  $  deg 
  PARAM ZOPT      =          1    $  Option flag: Input ZF and disregard THW 
 $ 
  PARAM NSEG   = 10               $ Number of segments 
  PARAM TSTEP  = 0.5              $ Time step, s 
  PARAM VI     = 0.0              $ Initial velocity, ft/s 
  PARAM XI     = -10.0            $ Initial distance, ft 
  PARAM ZI     = 10.0             $ Initial altitude, ft 
  PARAM ALPHA1 = 0.0    0.0    7.0    7.0    8.0
                 8.0    8.0    8.0    8.0    8.0      $ Angle of attack, deg 
  PARAM PLG1   = 4HDOWN 4HDOWN 4HDOWN 4HDOWN 4HUP
                 4HUP   4HUP   4HUP   4HUP   4HUP     $ Gear setting  
  PARAM THROT1 = 0.50   1.0    1.0    1.0    1.0
                 0.668  0.682  0.854  0.858  0.858    $ Power setting 
  PARAM DELTA1 = 10.0   10.0   10.0   10.0   10.0
                 10.0   10.0   0.0    0.0    0.0      $ Flap setting, deg 
  PARAM TLG1   = 0.0    0.0    0.0    3.0    0.0
                 0.0    0.0    0.0    0.0    0.0      $ Gear reset time, s 
  PARAM VF1    = 2.0    262.0  310.0  315.0  340.0
                 358.0  371.0  385.0  388.0  388.0    $ Final velocity, ft/s 
  PARAM XF1    = 0.     6000.0 7310.0 13034. 15831.
                 21325. 26359. 33896. 38067. 96461.   $ Final distance, ft 
  PARAM ZF1    = 10.0   10.0   35.0   1000.0 1210.0
                 1558.  1853.0 2500.0 3000.0 10000.0  $ Final altitude, ft
  PARAM SFOPRT = 0                                    $ Print option     
 $ 
 $    Executes the SFOMUL procedure
 $
  CALL PROCLIB(SFOMUL)          $
 $
 $    Define ground observer coordinates
 $
$$$ A2_GROUND_OBSERVER
 $
 $   Define input user parameters for the Geometry Module (GEO)
 $
  PARAM AW        =      1344.    $  Reference area of aircraft, ft2
  PARAM MASSAC    =      5400.    $  Reference mass of aircraft, sl
  PARAM CTK       =        1.0    $  Characteristic time constant
  PARAM DELDB     =       15.0    $  Limiting noise level down from peak, dB
  PARAM DTIME     =        0.5    $  Reception time increment, s
  PARAM DELTH     =        5.0    $  Max polar directivity angle limit, deg
  PARAM ICOORD    =          1    $  Output flag: Body axes output,
  PARAM START     =         0.    $  Initial flight time to be considered, s
  PARAM STOP      =      9999.    $  Final flight time to be considered, s
  PARAM DIRECT    =    .FALSE.    $  Interpolate from FLI(PATH) observer
                                  $  reception times based on user
                                  $  parameters START, STOP, DELTH, and DELT
  PARAM IPRINT = 3                $  Turn on print
 $
 $    Execute the Geometry Module (GEO)
 $
  EXECUTE GEO                     $
 $
 $    Define Propulsion Geometric Parameters
 $
  PARAM EASF     =       1.00 $ Engine Scale Factor (Area-Based).
  PARAM ELSF     =       1.00 $ Engine Scale Factor (Linear-Based).
  PARAM AE       =    20.9600 $ Reference area of the engine (ft^2) * EASF.
  PARAM HDIAM    =     0.3380 $ Fan hub diameter * ELSF re SQRT(Ae).
  PARAM DIAM     =     1.0000 $ Fan Outer diameter * ELSF re SQRT(Ae).
  PARAM HTIP     =     0.3380 $ Fan Diameter Ratio (HDIAM / DIAM).
  PARAM AFAN     =   0.950000 $ Fan flow area * EASF re Ae.
  PARAM FADPTTM  =     1.2660 $ Fan ADP Tangential Tip Mach Number.
  PARAM MD       =     1.4660 $ Fan ADP Helical Tip Mach Number.
  PARAM FFDM     =     1.3660 $ Fan Face design Mach Number.
  PARAM NB       =         20 $ Number of Fan Rotor Blades.
  PARAM NV       =         50 $ Number of Fan Exit guide Vanes 
  PARAM RSSI     =    21.3800 $ Fan Rotor Spacing in inches 
  PARAM RSSFAN   =     3.8400 $ Fan rotor-stator spacing fraction.
  PARAM AFBAL    =    10.3600 $ Average fan blade axial length (in).
  PARAM AFBCL    =    14.6500 $ Average fan blade chord length in inches.
  PARAM TFBCL    =     3.1100 $ Tip fan blade axial length in inches.
  PARAM CBL      =     0.3667 $ Tip fan blade chord length (ft) * ELSF.
  PARAM CBLX     =     0.0000 $ Fan blade projected axial chord length (ft) * ELSF.
  PARAM FBAR     =     0.0000 $ Fan blade aspect ratio.
  PARAM ADPN1    =    4666.20 $ Design rotation rate in RPM.
  PARAM L        =     2.3950 $ Axial length of inlet (ft) * ELSF.
  PARAM LENGIN   =     2.5575 $ Axial Length of Inlet Treated Area (ft) * ELSF
  PARAM LENGAF   =     3.8475 $ Axial Length of Aft Treated Area (ft) * ELSF
  PARAM HITEIN   =     2.6875 $ Average Inlet Radius of Treated Region (ft) * ELSF
  PARAM HITEAF   =     0.7650 $ Average Duct Height of Aft Treated Region (ft) * ELSF
  PARAM DTHI1    =     0.4963 $ Core Nozzle Plug Diameter at throat * ELSF re SQRT(Ae)
  PARAM DTHO1    =     0.7887 $ Core Nozzle Outer Diameter at throat * ELSF re SQRT(Ae)
  PARAM DI1      =     0.4963 $ Core Nozzle Plug Diameter at exit * ELSF re SQRT(Ae)
  PARAM DO1      =     0.7887 $ Core Nozzle Outer Diameter at exit * ELSF re SQRT(Ae)
  PARAM LP       =     0.6553 $ Core Nozzle Exit To Tip (Ft) * ELSF re SQRT(Ae)
  PARAM PER1     =     1.0000 $ Wetted perimeter ratio of primary stream.
  PARAM RTIP     =     0.0000 $ Plug Tip Radius of Curvature * ELSF re SQRT(Ae).
  PARAM HNOZ     =     0.0000 $ Height of Rectangular Nozzle * ELSF re SQRT(Ae).
  PARAM WNOZ     =     0.0000 $ Width of Rectangular Nozzle * ELSF re SQRT(Ae).
  PARAM DTHI2    =     0.8359 $ Fan Nozzle Inner Diameter at throat ELSF re SQRT(Ae).
  PARAM DTHO2    =     1.1293 $ Fan Nozzle Outer Diameter at throat * ELSF re SQRT(Ae).
  PARAM DI2      =     0.8359 $ Fan Nozzle Inner Diameter at exit * ELSF re SQRT(Ae).
  PARAM DO2      =     1.1293 $ Fan Nozzle Outer Diameter at exit * ELSF re SQRT(Ae).
  PARAM L1       =     0.2971 $ Fan Nozzle Exit to Core Nozzle Exit * ELSF re SQRT(Ae).
  PARAM PER2     =     1.0000 $ Fan Nozzle Wetted Perimeter Ratio.
  PARAM BIIR     =     6.7300 $ Burner Inlet Inner Radius (in).
  PARAM BIOR     =    10.7800 $ Burner Inlet Outer Radius (in).
  PARAM A        =     0.0740 $ Burner Inlet Area (ft^2) * EASF re Ae.
  PARAM BEA      =     0.0520 $ Burner exit area (ft^2) * EASF re Ae.
  PARAM CTP      =  1116.5500 $ Speed of Sound on tailpipe Static Temperature (ft/s).
  PARAM DTP      =     1.0000 $ Tailpipe Diameter (ft).
  PARAM LPTSC    =          4 $ LPT Stage Count.
  PARAM NBLADE   =        100 $ Number of Turbine Rotor Blades.
  PARAM LPTRSS   =     0.0000 $ LPT Rotor Spacing (ft).
  PARAM LPTD     =     0.7000 $ Turbine Rotor Diameter * ELSF re SQRT(Ae).
  PARAM LPTFSTD  =     2.6000 $ Turbine Final Stage Tip Diameter (ft).
  PARAM LPTFSHD  =     1.8700 $ Turbine Final Stage Hub Diameter (ft).
  PARAM LPTEA    =     3.0400 $ Turbine Exit Area (ft^2).
 $
 $
 $    Define Engine State Tables 
 $
 $ ENGINE STATE TABLES FOR THE DUCTED FAN 1
 $
  TABLE ENG(FAN1) 1 SOURCE=* $
  INT = 0 1
  IND1 = RS 2 0 0 1.00 0.07
  IND2 = RS 2 0 0 0.00 0.40
  IND3 = 0 6 0 0
  DEP = RS
   0.7898  0.7898
   0.7898  0.7898
   0.0000  0.0000
   0.0000  0.0000
   0.5251  0.1391
   0.5783  0.2538
   0.9925  0.9925
   1.0005  1.0005
   1.0020  1.0020
   1.0245  1.0245
   0.4386  0.1551
   0.4530  0.1939
  END* $
 $
  TABLE ENG(FAN2) 1 SOURCE=* $
  INT = 0 1
  IND1 = RS 2 0 0 1.00 0.07
  IND2 = RS 2 0 0 0.00 0.40
  IND3 = 0 6 0 0
  DEP = RS
   0.0000  0.0000
   0.0000  0.0000
   0.0000  0.0000
   0.0000  0.0000
   0.4363  0.1147
   0.4805  0.2235
   1.6900  1.0624
   1.8466  1.1904
   1.1781  1.0228
   1.2093  1.0523
   0.0000  0.0000
   0.0000  0.0000
  END* $
 $
 $ ENGINE STATE TABLES FOR THE COMBUSTOR 1
 $
  TABLE ENG(CORE1) 1 SOURCE=* $
  INT = 0 1
  IND1 = RS 2 0 0 1.00 0.07
  IND2 = RS 2 0 0 0.00 0.40
  IND3 = 0 6 0 0
  DEP = RS
   0.0740  0.0740
   0.0740  0.0740
   0.0000  0.0000
   0.0000  0.0000
   0.0659  0.0174
   0.0726  0.0215
  28.6480  5.6150
  32.1170  7.1971
   2.7759  1.7651
   2.8694  1.8775
   0.0000  0.0000
   0.0000  0.0000
  END* $
 $
  TABLE ENG(CORE2) 1 SOURCE=* $
  INT = 0 1
  IND1 = RS 2 0 0 1.00 0.07
  IND2 = RS 2 0 0 0.00 0.40
  IND3 = 0 6 0 0
  DEP = RS
   0.0520  0.0520
   0.0520  0.0520
   0.0302  0.0126
   0.0307  0.0136
   0.0679  0.0176
   0.0749  0.0218
  27.1000  5.3116
  30.3820  6.8083
   5.9593  3.3240
   6.1563  3.5756
   0.0000  0.0000
   0.0000  0.0000
  END* $
 $
 $ ENGINE STATE TABLES FOR THE JET NOZZLE 1
 $
   TABLE ENG(PRIM) 1 SOURCE=* $
   INT = 0 1
   IND1 = RS 2 0 0 1.00 0.07
   IND2 = RS 2 0 0 0.00 0.40
   IND3 = 0 6 0 0
   DEP = RS
    0.1300  0.1201
    0.1313  0.1210
    0.0233  0.0097
    0.0237  0.0105
    0.0874  0.0229
    0.0964  0.0283
    1.7604  1.0388
    1.9489  1.0600
    3.0933  2.1293
    3.1918  2.1852
    0.0000  0.0000
    0.0000  0.0000
   END* $
  $
  $ ENGINE STATE TABLES FOR THE JET NOZZLE 2
  $
   TABLE ENG(SEC) 1 SOURCE=* $
   INT = 0 1
   IND1 = RS 2 0 0 1.00 0.07
   IND2 = RS 2 0 0 0.00 0.40
   IND3 = 0 6 0 0
   DEP = RS
    0.4195  0.3814
    0.4241  0.3937
    0.0000  0.0000
    0.0000  0.0000
    0.4363  0.1147
    0.4805  0.2235
    1.6649  1.0466
    1.8191  1.1727
    1.1781  1.0228
    1.2093  1.0523
    0.0000  0.0000
    0.0000  0.0000
   END* $
 $
 $    Define jet noise procedure
 $
  DATA DM=RUNJET                   $
     PARAM I      =            1   $ Set initial counter value
     RJ1 CONTINUE                  $ Begin loop
     PARAM CA     =       CTA(I)   $ Ambient sound speed, ft/s
     PARAM MA     =       MTA(I)   $ Flight Mach
     PARAM RHOA   =     RHOTA(I)   $ Ambient density, sl/ft3
     PARAM T1     =       TT1(I)   $ Primary jet total temperature, Re TA
     PARAM V1     =       VT1(I)   $ Primary jet fully expanded velocity, Re CA
     PARAM T2     =       TT2(I)   $ Secondary jet total temperature, Re TA
     PARAM V2     =       VT2(I)   $ Secondary jet fully expanded velocity, Re CA
     PARAM SCRNNN =            I   $ Set unit member to current counter value
     PARAM STIME  =     TIMES(I)   $ Source time, s
                                   $
                                   $ Use either ST2JET or STNJET, but not both:
     EXECUTE ST2JET ST2JET=NOISE   $ Execute the newer ST2JET module
     EVALUATE I   =        I + 1   $ Increment counter
     IF (I .LE. NTIMES) GOTO RJ1   $ Continue if not done
   END* $
 $
 $    Define input user parameters for the Jet Noise Parameters Module (PREJET) 
 $
  PARAM ITYPE     =             1  $ Use linear interpolation
  PARAM SCRXXX    =         3HXXX  $ Three letter code for unit member name
  PARAM IRATIO    =    8HCONSTANT  $ Assume gamma is constant
  PARAM AP        =   0.19343      $ Primary nozzle plug area * EASF Re AE
 $
 $    Execute the Jet Noise Parameters Module (PREJET) 
 $
  EXECUTE PREJET                   $ 
 $
 $    Define input user parameters for the Stone Jet Noise Module (ST2JET)
 $
  PARAM STREAM    =            2   $ Integer switch defining number of streams 
                                   $ (use 2 for coannular)
  PARAM STATIC   = .FALSE.         $ Compute distributed source effects
  PARAM SIDELINE = .FALSE.         $ Logical flag for microphone array
  PARAM PLUG     = .TRUE.          $ Logical flag denoting presence of center 
                                   $ plug
  PARAM SUPP     = .FALSE.         $ Logical flag denoting presence of chevrons, 
                                   $ chutes, or tabs
  PARAM OUTSTRM  = .FALSE.         $ Compute small-scale outer stream mixing 
                                   $ noise
  PARAM INSTRM   = .TRUE.          $ Compute intermediate-scale inner stream 
                                   $ mixing noise
  PARAM MERGSTRM = .TRUE.          $ Compute large-scale merged stream mixing 
                                   $ noise
  PARAM INPLUG   = .FALSE.         $ Compute plug separation noise
  PARAM INSHK    = .FALSE.         $ Compute inner stream shock noise
  PARAM OUTSHK   = .FALSE.         $ Compute outer stream shock noise or 
                                   $ plug/downstream merged shock noise
  PARAM DELTA    =             0.0 $ Angle between flight vector and engine axis
                                   $ deg
  PARAM STNMTH   =               1 $ =1; original ANOPP Stone method
                                   $ =2; AlliedSignal small jet method
  PARAM CIRCLE   =         .FALSE. $ =.TRUE.; Implies single-stream nozzle
                                   $ =.FALSE.; Implies coannular nozzle
  PARAM SUPER    =         .FALSE. $ =.TRUE.; Implies supersonic primary stream
                                   $ =.FALSE.; otherwise
 $
 $    Execute jet noise procedure
 $
  CALL DATA(RUNJET) NOISE=JET $
 $
 $    Define fan noise procedure
 $
  DATA DM=RUNFAN                   $
     PARAM I       =             1 $ Set initial counter value
     RF1 CONTINUE                  $ Begin loop
     PARAM CA      =        CTA(I) $ Ambient sound speed, ft/s
     PARAM MA      =        MTA(I) $ Flight Mach
     PARAM RHOA    =      RHOTA(I) $ Ambient density, sl/ft3
     PARAM MDOT    =        MT1(I) $ Air flowrate, Re RHOA*CA*AE
     PARAM N       =        NT1(I) $ Fan rotational speed, Re CA/DIAM,
     PARAM DELTAT  =        DT1(I) $ Total temperature rise across fan, Re ambient
     PARAM SCRNNN  =             I $ Set unit member to current counter value
     PARAM STIME   =      TIMES(I) $ Source time, s
     EXECUTE HDNFAN HDNFAN=NOISE   $ Name the source and run the module
     EVALUATE I    =         I + 1 $ Increment counter
     IF (I .LE. NTIMES)   GOTO RF1 $ Continue if not done
   END* $
 $
 $    Define fan noise treatment procedure
 $
  DATA DM=RUNTRT                    $
     PARAM I       =             1 $ Set initial counter value
     RT1 CONTINUE                  $ Begin loop
     PARAM SCRNNN  =             I $ Set unit member to current counter value
     PARAM STIME   =      TIMES(I) $ Source time, s
     EXECUTE TREAT HDNIN=NOISIN HDNAFT=NOISAF TREAT=TREATED $
     EVALUATE I    =         I + 1 $ Increment counter
     IF (I .LE. NTIMES)   GOTO RT1 $ Continue if not done
  END* $
 $
 $    Define input user parameters for the Fan Noise Parameters Module (PREFAN)
 $
  PARAM ITYPE     =             1  $ Use linear interpolation
  PARAM SCRXXX    =         3HXXX  $ Three letter code for unit member name
 $
 $    Execute the Fan Noise Parameters Module (PREFAN)
 $
  EXECUTE PREFAN                   $
 $
 $    Define input user parameters for the Heidmann Fan Noise Module (HDNFAN) 
 $
  PARAM HDNMTH    =             3 $ Prediction method flag: =3 Large Fan Method
  PARAM DIS       =             1 $ Inlet flow distortion flag; =1, no distortion
  PARAM IGV       =             1 $ Inlet guide vane index; =1, no IGVs
  PARAM NBANDS    =             0 $ 1/3 octave bands for tone frequency shift
  PARAM INDIS     =       .FALSE. $ Do not calculate inlet flow distortion tones
  PARAM ITYPE     =             1 $ Use linear interpolation
  PARAM SCRNNN    =             1 $ Integer value > 0 for unit member name
  PARAM PATH      =             2 $ Option flag indicating TAKEOFF flight cleanup
  PARAM RSS       =        RSSFAN $ Rotor-stator axial spacing at the tip.
 $
 $    Define input user parameters for inlet radiated fan noise
 $
  PARAM INBB      =       .TRUE. $ Fan inlet broadband switch
  PARAM INRS      =       .TRUE. $ Fan inlet rotor-stator discrete tone switch
  PARAM INCT      =       .TRUE. $ Fan inlet combination tone switch
  PARAM IDBB      =      .FALSE. $ Fan discharge broadband switch
  PARAM IDRS      =      .FALSE. $ Fan discharge rotor-stator discrete tone switch
 $
 $    Execute noise procedure for hardwall inlet radiated fan noise
 $
  CALL DATA(RUNFAN) NOISE=INLET  $
 $
 $    Define input user parameters inlet radiated treated fan noise
 $
  PARAM TRTMTH    =             2 $ Prediction method flag:
                                  $ =2; General Electric large turbofan method
  PARAM ITYPIN      =           1 $ Fan inlet treatment application switch
  PARAM ITYPAF      =           0 $ Fan discharge treatment application switch
 $
 $    Execute procedure for teated inlet radiated fan noise
 $ 
  CALL DATA(RUNTRT) NOISIN=INLET NOISAF=INLET TREATED=INLETT $
 $
 $    Define input user parameters for aft radiated fan noise
 $
  PARAM INBB      =      .FALSE. $ Fan inlet broadband switch
  PARAM INRS      =      .FALSE. $ Fan inlet rotor-stator discrete tone switch
  PARAM INCT      =      .FALSE. $ Fan inlet combination tone switch
  PARAM IDBB      =       .TRUE. $ Fan discharge broadband switch
  PARAM IDRS      =       .TRUE. $ Fan discharge rotor-stator discrete tone switch
 $
 $    Execute procedure for hardwall aft radiated fan noise
 $
  CALL DATA(RUNFAN) NOISE=AFTFAN $
 $
 $    Define input user parameters aft-radiated treated fan noise
 $
  PARAM ITYPIN      =          0 $ Fan inlet treatment application switch
  PARAM ITYPAF      =          1 $ Fan discharge treatment application switch
 $
 $    Execute procedure for teated aft-radiated fan noise
 $ 
  CALL DATA(RUNTRT) NOISIN=AFTFAN NOISAF=AFTFAN TREATED=AFTFNT $
 $
 $    Define combustor noise procedure
 $
  DATA DM=RUNCOR                   $
     PARAM I       =             1 $ Set initial counter value
     PARAM PIMAX   =        29.999 $ Maximum normalized combustor inlet pressure
     RC1 CONTINUE                  $ Begin loop
     PARAM CA      =        CTA(I) $ Ambient sound speed, ft/s
     PARAM MA      =        MTA(I) $ Flight Mach
     PARAM RHOA    =      RHOTA(I) $ Ambient density, sl/ft3
     PARAM MDOT    =        MT1(I) $ Air flowrate, Re RHOA*CA*AE
     PARAM PI      =        PT1(I) $ Combustor inlet total pressure, Re PA
     IF (PI .LE. PIMAX) GOTO RC2   $ Check inlet total pressure
        PARAM PI   =         PIMAX $ Set to maximum value if greater than upper
     RC2 CONTINUE                  $ limit
     PARAM TI      =        TT1(I) $ Combustor inlet total temperature, Re ambient
     PARAM TCJ     =        TT2(I) $ Combustor exit total temperature, Re ambient
     PARAM SCRNNN  =             I $ Set unit member to current counter value
     PARAM STIME   =      TIMES(I) $ Source time, s
     EXECUTE GECOR GECOR=NOISE     $ Name the source and run the module
     EVALUATE I    =         I + 1 $ Increment counter
     IF (I .LE. NTIMES) GOTO RC1   $ Continue if not done
   END* $
 $
 $    Define input user parameters for the Combustor Noise Parameters Module (PRECOR) 
 $
  PARAM ITYPE     =             1 $ Use linear interpolation
  PARAM SCRXXX    =         3HXXX $ Three letter code for unit member name
 $
 $    Execute the Combustor Noise Parameters Module (PRECOR)
 $
  EXECUTE PRECOR   $
 $
 $    Define input user parameters for the Combustor Noise Module (GECOR)
 $
  PARAM ICAO78    =       .FALSE.  $ Spectral distribution switch: =FALSE; Use regular function
  PARAM GECMTH    =             1  $ Prediction method flag: =1; Original ANOPP method,
  PARAM SCRNNN    =             1  $ Integer value > 0 for unit member name
  PARAM GECNB     =             0  $ Option switch for narrowband model:
                                   $  = 0, use 1/3 octave band model
  PARAM TDDELT    =         1564.  $ Design turbine temperature drop, R
  EVALUATE TDDELT =     TDDELT/TA  $ Design turbine temperature drop, Re TA
  PARAM LCHAR     =           1.0  $ Characteristic length, represented by distance
                                   $ from center of combustor source to tailpipe exit, ft
  EVALUATE LCHAR  =    LCHAR*ELSF  $ Adjust for engine scale (with linear factor)
 $
 $    Execute combustor noise procedure
 $
  CALL DATA(RUNCOR) NOISE=GECOR  $
 $
 $    Define airframe noise procedure
 $
  DATA DM=RUNAFM                   $
     PARAM I      =             1  $ Set initial counter value
     RA1 CONTINUE                  $ Begin loop
     PARAM CA     =        CTA(I)  $ Ambient sound speed, ft/s
     PARAM MA     =        MTA(I)  $ Flight Mach
     PARAM LANDG  =     LANDTG(I)  $ Gear position indicator (UP or DOWN)
     PARAM DELTAF =    DELTATF(I)  $ Flap setting, degrees
     PARAM RHOA   =      RHOTA(I)  $ Ambient density, sl/ft3
     PARAM MUA    =       MUTA(I)  $ Ambient dynamic viscosity, sl/ft-s
     PARAM SCRNNN =             I  $ Set unit member to current counter value
     PARAM STIME  =      TIMES(I)  $ Source time, s
     EXECUTE FNKAFM FNKAFM=NOISE   $ Name the source and run the module
     EVALUATE I   =         I + 1  $ Increment counter
     IF (I .LE. NTIMES) GOTO RA1   $ Continue if not done
   END* $
 $
 $    Define input user parameters for the Airframe Noise Parameters Module (PREAFM) 
 $
  PARAM SCRXXX    =      3HXXX     $ Three letter code for unit member name
 $    
 $    Execute Airframe Noise Parameters Module (PREAFM)
 $
  EXECUTE PREAFM                    $
 $
 $    Define input user parameters for the Airframe Noise Module (FNKAFM)
 $
  PARAM AW        =         1344.  $ Wing area, ft2
  EVALUATE AF     =        0.3*AW  $ Flap area, ft2
  PARAM AH        =         352.8  $ Horizontal tail area, ft2
  PARAM AV        =         284.6  $ Vertical tail area, ft2
  PARAM BW        =        112.58  $ Wing span, ft
  EVALUATE BF     =      0.599*BW  $ Flap span, ft
  PARAM BH        =         47.08  $ Horizontal tail span, ft
  PARAM BV        =           24.  $ Vertical tail span, ft
  PARAM DMG       =          3.71  $ Tire diameter, main gear, ft
  PARAM DNG       =          2.25  $ Tire diameter, nose gear, ft
  PARAM LMG       =            5.  $ Strut length, main gear, ft
  PARAM LNG       =            5.  $ Strut length, nose gear, ft
  PARAM NWMG      =             2  $ Number of wheels per main gear
  PARAM NWNG      =             2  $ Number of wheels per nose gear
  PARAM NMG       =             2  $ Number of main gear
  PARAM NNG       =             1  $ Number of nose gear
  PARAM NS        =             1  $ Number of flap slots for takeoff
  PARAM DELTAW    =       .FALSE.  $ Delta-winged airplane
  PARAM DYNCLN    =       .FALSE.  $ Aerodynamically clean airplane,
                                   $ as per sailplane
  PARAM SCRNNN    =              1 $ Integer value > 0 for unit member name
 $
 $    Define input user parameters to compute gear noise
 $
  TITLE 10HGEAR NOISE              $ Add title
  PARAM TEWN      =       .FALSE.  $ Compute trailing edge wing noise
  PARAM TEHTN     =       .FALSE.  $ Compute trailing edge HTail noise
  PARAM TEVTN     =       .FALSE.  $ Compute trailing edge VTail noise
  PARAM TEFN      =       .FALSE.  $ Compute trailing edge flap noise
  PARAM LESN      =       .FALSE.  $ Compute leading edge slat noise
  PARAM MLGN      =        .TRUE.  $ Compute main gear noise
  PARAM NLGN      =        .TRUE.  $ Compute nose gear noise
 $
 $    Execute procedure to compute gear noise
 $
  CALL DATA(RUNAFM) NOISE=GEAR     $
 $
 $    Define input user parameters to compute leading edge slat noise
 $
  PARAM TEWN      =       .FALSE.  $ Compute trailing edge wing noise
  PARAM TEHTN     =       .FALSE.  $ Compute trailing edge HTail noise
  PARAM TEVTN     =       .FALSE.  $ Compute trailing edge VTail noise
  PARAM TEFN      =       .FALSE.  $ Compute trailing edge flap noise
  PARAM LESN      =        .TRUE.  $ Compute leading edge slat noise
  PARAM MLGN      =       .FALSE.  $ Compute main gear noise
  PARAM NLGN      =       .FALSE.  $ Compute nose gear noise
 $
 $    Execute procedure to compute leading edge slat noise
 $
  CALL DATA(RUNAFM) NOISE=SLAT     $
 $
 $    Define input user parameters to compute trailing edge flap noise
 $
  PARAM TEWN      =       .FALSE.  $ Compute trailing edge wing noise
  PARAM TEHTN     =       .FALSE.  $ Compute trailing edge HTail noise
  PARAM TEVTN     =       .FALSE.  $ Compute trailing edge VTail noise
  PARAM TEFN      =        .TRUE.  $ Compute trailing edge flap noise
  PARAM LESN      =       .FALSE.  $ Compute leading edge slat noise
  PARAM MLGN      =       .FALSE.  $ Compute main gear noise
  PARAM NLGN      =       .FALSE.  $ Compute nose gear noise
 $
 $    Execute procedure to compute trailing edge flap noise
 $
  CALL DATA(RUNAFM) NOISE=FLAP     $
 $
 $    Define input user parameters to compute trailing edge surface noise
 $
  PARAM TEWN      =        .TRUE.  $ Compute trailing edge wing noise
  PARAM TEHTN     =        .TRUE.  $ Compute trailing edge HTail noise
  PARAM TEVTN     =        .TRUE.  $ Compute trailing edge VTail noise
  PARAM TEFN      =       .FALSE.  $ Compute trailing edge flap noise
  PARAM LESN      =       .FALSE.  $ Compute leading edge slat noise
  PARAM MLGN      =       .FALSE.  $ Compute main gear noise
  PARAM NLGN      =       .FALSE.  $ Compute nose gear noise
 $
 $    Execute procedure to compute trailing edge surface noise
 $
  CALL DATA(RUNAFM) NOISE=TRAL     $
 $
 $    Define input user parameters Propagation Module (PRO)
 $
  PARAM NBAND     =            5   $  Number of subbands per 1/3-octave band
  PARAM SURFACE   =       4HSOFT   $  Type of surface
  PARAM SIGMA     =       485.08   $  Specific flow resistance of ground, sl/s-ft3
  PARAM COH       =         0.01   $  Incoherence coefficient
  PARAM SAELAT    =       .TRUE.   $  Lateral attenuation option
  PARAM G         =          1.8   $  Overhead ground attenuation, EPNdB
  PARAM PROTIME   =        3HXXX   $  3-letter ID from unit member FLI(FLIXXX)
  PARAM ABSORP    =       .TRUE.   $  Logical flag for atmospheric absorption effects
                                   $    =True, include absorption effects
  PARAM GROUND    =       .FALSE.   $  Logical flag for ground effects
                                   $    =True, include ground effects
  PARAM LOSSLESS  =       .TRUE.   $  Logical flag to indicate if absorption
                                   $  is accounted for in the noise source
                                   $    =True, source does not include absorption
  PARAM STATIC    =      .FALSE.   $  Logical flag to define motion
                                   $    =False, noise source is moving
  PARAM SIDELN    =      .FALSE.   $  Logical flag to define observer locations
                                   $    =False, observers are on an arc surface
                                   $       and at the same altitude
 $
 $   Define input user parameters for the Noise Levels Module (LEV)
 $
  PARAM IAWT      =       .TRUE.   $  A-weighted sound pressure level option
  PARAM IDWT      =      .FALSE.   $  D-weighted sound pressure level option
  PARAM IOSPL     =      .FALSE.   $  Overall sound pressure level option
  PARAM IPNL      =      .FALSE.   $  Perceived noise level (PNL) option
  PARAM NAWT      =      .FALSE.   $  A-weighted SPL based on narrow band data
  PARAM NDWT      =      .FALSE.   $  D-weighted SPL based on narrow band data
  PARAM NOSPL     =      .FALSE.   $  Do not compute OASPL based on narrow band data
  PARAM IPNLT     =       .TRUE.   $  Tone-corrected PNL option
  PARAM TCF800    =       .TRUE.   $  Logical flag =True, Ignore tones below 800 Hz
  PARAM MEMSUM    =  4HPRO 4HPRES  $  Unit name and member name of the noise member 
                                   $  to be summed
  PARAM IPRINT =  3                $ Turn on print
 $
 $    Compute noise metrics for total aircraft system
 $
  PARAM PROSUM    =      6HJET    , 6HINLETT , 6HAFTFNT  , 6HGECOR   , 
                         6HGEAR   , 6HFLAP   , 6HTRAL   $   
                                    $  Name(s) of source unit(s) to be summed
  EXECUTE PRO GEOM=BODY             $  Execute the propagation module
  PARAM LEVOUT = 5HTOTAL            $  Output file name
  EXECUTE LEV                       $  Execute the Noise Levels Module (LEV)
  EXECUTE EFF                       $  Execute the Effective Noise Module (EFF)
 $
 $    Compute noise metrics for engine sources
 $
  PARAM PROSUM    =      6HJET    , 6HINLETT , 6HAFTFNT  , 6HGECOR   $
                                    $  Name(s) of source unit(s) to be summed
  EXECUTE PRO GEOM=BODY             $  Execute the propagation module
  PARAM LEVOUT = 6HENGINE           $  Output file name
  EXECUTE LEV                       $  Execute the Noise Levels Module (LEV)
  EXECUTE EFF                       $  Execute the Effective Noise Module (EFF)
 $
 $    Compute noise metrics for airframe sources
 $
  PARAM PROSUM    =      6HGEAR   , 6HFLAP   , 6HTRAL   $   
                                    $  Name(s) of source unit(s) to be summed
  EXECUTE PRO GEOM=BODY             $  Execute the propagation module
  PARAM LEVOUT = 8HAIRFRAME         $  Output file name
  EXECUTE LEV                       $  Execute the Noise Levels Module (LEV)
  EXECUTE EFF                       $  Execute the Effective Noise Module (EFF)
 $
 $ End input declarations
 $
  ENDCS                             $
